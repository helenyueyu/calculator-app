{"version":3,"sources":["App.js","components/Result.js","components/Keypad.js","serviceWorker.js","index.js"],"names":["App","state","result","onClick","key","_this","setState","slice","eval","e","reset","_this2","this","document","addEventListener","event","includes","console","log","removeEventListener","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","_components_Result__WEBPACK_IMPORTED_MODULE_7__","onChange","handleChange","_components_Keypad__WEBPACK_IMPORTED_MODULE_8__","Component","Result","type","value","props","readOnly","Keypad","name","target","Boolean","window","location","hostname","match","ReactDOM","render","react_default","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ae64b59.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nimport Result from './components/Result'\nimport Keypad from './components/Keypad'\n\n\nclass App extends Component {\n  state = {\n    result: ''\n  }\n  componentDidMount() {\n    document.addEventListener('keypress', (event) => (['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '*', '-', '+', '/'].includes(event.key)) ? this.setState(\n      {\n        result: this.state.result + event.key\n      }\n    ) : (event.key==='Enter') ? this.setState(\n      {\n        result: (eval(this.state.result) || '') + ''\n      }\n    ) : console.log('Not a valid entry.'))\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keypress')\n  }\n  onClick = key => {\n    if (key === \"C\") {\n      this.setState({result: ''})\n    } else if (key === \"CE\") {\n      this.setState({\n        result: this.state.result.slice(0, -1)\n      })\n    } else if (key === \"=\") {\n      try {\n        this.setState({\n          result: (eval(this.state.result) || '') + ''\n        })\n      } catch (e) {\n        this.setState({result: 'error'})\n      }\n    } else {\n      this.setState({\n        result: this.state.result + key\n      })\n    }\n  }\n  reset = () => {\n    this.setState({result: ''})\n  }\n  render() {\n    return (<div>\n      <div className=\"calculator\">\n        <p className=\"invisible\">Invisible text.</p>\n        <Result result={this.state.result} onChange={this.handleChange}/>\n        <Keypad onClick={this.onClick}/>\n      </div>\n    </div>);\n  }\n}\n\nexport default App;\n","import React, {Component} from 'react'\nimport './Result.css'\n\nclass Result extends Component {\n  render() {\n    return (\n      <div className=\"result\">\n        <input type=\"text\" value={this.props.result} className=\"input\" readOnly/>\n      </div>\n    )\n  }\n}\n\nexport default Result;\n","import React, {Component} from 'react'\nimport './Keypad.css'\n\nclass Keypad extends Component {\n  render() {\n    return (<div className=\"button\">\n      <button name=\"(\" onClick={e => this.props.onClick(e.target.name)} className=\"key\">(</button>\n      <button name=\")\" onClick={e => this.props.onClick(e.target.name)} className=\"key\">)</button>\n      <button name=\"CE\" onClick={e => this.props.onClick(e.target.name)} className=\"clear\">CE</button>\n      <button name=\"C\" onClick={e => this.props.onClick(e.target.name)} className=\"clear\">C</button><br/>\n\n      <button name=\"1\" onClick={e => this.props.onClick(e.target.name)} className=\"num pulse\">1</button>\n      <button name=\"2\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">2</button>\n      <button name=\"3\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">3</button>\n      <button name=\"+\" onClick={e => this.props.onClick(e.target.name)} className=\"att\">+</button><br/>\n\n      <button name=\"4\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">4</button>\n      <button name=\"5\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">5</button>\n      <button name=\"6\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">6</button>\n      <button name=\"-\" onClick={e => this.props.onClick(e.target.name)} className=\"att\">-</button><br/>\n\n      <button name=\"7\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">7</button>\n      <button name=\"8\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">8</button>\n      <button name=\"9\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">9</button>\n      <button name=\"*\" onClick={e => this.props.onClick(e.target.name)} className=\"att\">x</button><br/>\n\n      <button name=\".\" onClick={e => this.props.onClick(e.target.name)} className=\"key\">.</button>\n      <button name=\"0\" onClick={e => this.props.onClick(e.target.name)} className=\"num\">0</button>\n      <button name=\"=\" onClick={e => this.props.onClick(e.target.name)} className=\"key\">=</button>\n      <button name=\"/\" onClick={e => this.props.onClick(e.target.name)} className=\"att\">รท</button><br/>\n    </div>)\n  }\n}\n\nexport default Keypad\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}